import spotipy 
from spotipy.oauth2 import SpotifyOAuth
from pytube import Playlist
import config
import sys
import re

# playlist = input('Enter your Playlist name should be public: ')
# description = input('Enter your Playlist description: ')

youtube_playlist = input('Enter your youtube playlist link: ').strip()
# link validation
if not re.match(r'https://www.youtube.com/playlist\?list=[a-zA-Z0-9_-]+', youtube_playlist):
    sys.exit('Invalid youtube playlist link')


scope = 'playlist-modify-public playlist-modify-private'
token = SpotifyOAuth(client_secret=config.client_secret, scope=scope, client_id=config.client_id, redirect_uri=config.redirect_uri)

    
def search_on_spotify(song):
    # print in yellow color
    print(f"Searching for \033[93m{song}\033[00m on spotify............")
    spotifyobj = spotipy.Spotify(auth_manager=token)
    try:
        items = spotifyobj.search(q=song)['tracks']['items'][0]
    except IndexError:
        print(f"\033[91m{song} not found on spotify\033[00m")
        return None

    artists = items.get('artists', [])
    # print in name  on spotify
    print(f"    \033[92mFound {items['name']} on spotify by {', '.join([artist['name'] for artist in artists])}\033[00m")
    return items

def adding_songs_to_spotify_playlist(name, song_list):
    if len(song_list) == 0:
        print("No songs to add to spotify playlist")
        return
    print("Adding songs to spotify playlist")
    spotifyobj = spotipy.Spotify(auth_manager=token)
    user = spotifyobj.current_user()
    spotifyobj.user_playlist_create(user=user['id'], name=name, public=True, description='This is generated by a python script')
    playlists = spotifyobj.user_playlists(user=user['id'])
    playlist_id = playlists['items'][0]['id']

    for i in range(len(song_list)//100 + 1):
        songs = song_list[i*100 : i*100 + 100]
        # add list of song in playlist
        attempt = 0
        while True:
            try:
                spotifyobj.user_playlist_add_tracks(user=user['id'], playlist_id=playlist_id, tracks=songs)
                break
            except:
                # print in red color
                attempt += 1
                print(f"\033[91mError occured while adding songs to spotify playlist\033[00m Trying again attempt {attempt}...")
                if attempt == 5:
                    break
        print(f"\033[92mAdded {len(songs)} songs to spotify playlist\033[00m")

def get_songs(playlist):
    p = Playlist(playlist)
    if not p:
        sys.exit("Playlist not found")
    playlist_title = p.title
    print(f"There are {len(p.video_urls)} songs in {playlist_title}")
    for video in p.videos:
        # channel name
        yield video.title, video.author
            
def get_name(playlist):
    return Playlist(playlist).title

def main():
    # create a playlist
    song_list = []
    song_not_found = []
    count = 0
    with open("log.txt", 'a', encoding='utf-8') as f:
        f.write('youtube --> spotify\n')
    for song, author in get_songs(youtube_playlist):
        count += 1
        print(count, end='. ')
        song_on_spotify = search_on_spotify(song + ' ' + author)
       # Save all the songs in a playlist to a file
        with open("log.txt", 'a', encoding='utf-8') as f:
            f.write(f"{song} by {author} --> {song_on_spotify['name']} by {', '.join(artist['name'] for artist in song_on_spotify.get('artists', []))}\n")

        if not song_on_spotify:
            song_not_found.append((song, author))
            continue
        song_list.append(song_on_spotify['uri'])
        
    adding_songs_to_spotify_playlist(get_name(youtube_playlist), song_list)
    # print in green color
    print(f"\033[92mSuccessfully created a playlist on spotify\033[00m")
    # added len(song_list) in green and failed to add len(song_list) - count in red
    print(f"\033[92m{len(song_list)} Found\033[00m \033[91m{len(song_list) - count} Not found\033[00m")
    
    for song, author in song_not_found:
        print(f"\033[91m{song} by {author} not found on spotify\033[00m")
    
if __name__ == '__main__':
    main()

